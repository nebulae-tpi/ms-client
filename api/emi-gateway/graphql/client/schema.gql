type CommandResponse {
  "Response code"
  code: Int
  "Response message"
  message: String
}

type ClientClient {
  "Client ID"
  _id: ID!
  "User general info"
  generalInfo: ClientGeneralInfo
  "Client location"
  location: ClientClientLocation
  "Client state"
  state: Boolean!
  "auth credential"
  auth: ClientAuth
  "Creation timestamp"
  creationTimestamp: BigInt!
  "Creator user"
  creatorUser: String!
  "Modification timestamp"
  modificationTimestamp: BigInt!
  "Modifier user"
  modifierUser: String!
  "Business ID"
  businessId: String!
}

type ClientAuth {
  "username"
  username: String!
  "User keycloak ID"
  userKeycloakId: String!
}

type ClientGeneralInfo {
  "Client name"
  name: String!
  "Client phone"
  phone: BigInt
  "Client address"
  address: String
  "Client city"
  city: String
  "Client email"
  email: String
  "Client neighborhood"
  neighborhood: String
  "Referrer driver document id"
  referrerDriverDocumentId: String
}

input ClientClientFilterInput {
  "ID of the business"
  businessId: String
  "Name"
  name: String
  "State"
  state: Boolean
  "Creator user"
  creatorUser: String
  "modifier user"
  modifierUser: String
  "get data created after indicated timestamp"
  creationTimestamp: BigInt
}

input PaginationInput {
  "Page"
  page: Int!
  "Count"
  count: Int!
  "Sort, default: ASC"
  sort: Int
}

input ClientClientInput {
  "Client general info"
  generalInfo: ClientClientGeneralInfoInput!
  "Client status"
  state: Boolean!
  "Business ID"
  businessId: String!
}

input ClientClientGeneralInfoInput {
  "Client name"
  name: String!,
  "Client phone"
  phone: BigInt
  "Client address"
  address: String
  "Client city"
  city: String
  "Client email"
  email: String!
  "Client neighborhood"
  neighborhood: String
  "Referrer driver document id"
  referrerDriverDocumentId: String
}

# input ClientClientCredentialsInput {
#   "Client username"
#   username: String!,
#   "Client password"
#   password: String,
#   "Client roles"
#   roles: [String]

# }

type ClientClientLocation {
  lat: Float
  lng: Float
}

input ClientClientLocationInput {
  lat: Float
  lng: Float
}

input ClientPasswordInput {
  "User password"
  password: String!
  "User temporary"
  temporary: Boolean!
}

input ClientAuthInput {
  "username"
  username: String!
  "User password"
  password: String!
  "User temporary"
  temporary: Boolean!
}

type Query {
  "Get Clients filtered "
  ClientClients(filterInput: ClientClientFilterInput!, paginationInput: PaginationInput!): [ClientClient]
  "Get the amount of Clients filtered "
  ClientClientsSize(filterInput: ClientClientFilterInput!): Int!
  "Get Client by its id"
  ClientClient(id: String!): ClientClient
}

type Mutation {
  "Create a new Client"
  ClientCreateClient(input: ClientClientInput!): CommandResponse
  "Update the Client generalInfo"
  ClientUpdateClientGeneralInfo(id:ID!, input: ClientClientGeneralInfoInput!): CommandResponse
  "Update the client location"
  ClientUpdateClientLocation(id:ID!, input: ClientClientLocationInput): CommandResponse
  "Creates auth for the client"
  ClientCreateClientAuth(id: ID!, username: String!, input: ClientAuthInput): CommandResponse
  "Removes auth of the user (The user will be deleted from Keycloak)"
  ClientRemoveClientAuth(id: ID!): CommandResponse
  "Changes Client password"
  ClientResetClientPassword(id: ID!, input: ClientPasswordInput): CommandResponse  
  ClientUpdateClientState(id: ID!, newState: Boolean!): CommandResponse
}

type Subscription {
  "This events is triggered when a Client is created or updated"
  ClientClientUpdatedSubscription: ClientClient  
}